# GitHub Actions: PR Validation Checks
# Validates pull request titles and branch names against git quality standards
#
# Template Version: 1.0.0
# Skill: git_quality_standards
# Last Updated: 2025-01-20
#
# CUSTOMIZATION INSTRUCTIONS:
# 1. Copy to: .github/workflows/pr-checks.yml
# 2. Update PROJECT_CODE (line 30) to your 3-letter code
# 3. Update EPIC_DIGITS (line 31) if you use different epic number length
# 4. Customize branch types (line 51-52) if you have different types
# 5. Commit and push to enable
# 6. Test by opening a PR

name: 'PR Validation Checks'

on:
  pull_request:
    types: [opened, edited, synchronize, reopened]
    branches: [ main, master ]

env:
  # CUSTOMIZE: Your project's 3-letter code (e.g., CLD, API, WEB)
  PROJECT_CODE: 'XXX'

  # CUSTOMIZE: Epic number length (usually 4 digits)
  EPIC_DIGITS: '4'

  # CUSTOMIZE: Allowed branch types (add/remove as needed)
  # Common types: feature, fix, docs, style, refactor, test, chore, ci
  ALLOWED_TYPES: 'feature|fix|docs|style|refactor|test|chore|ci'

jobs:
  validate-pr:
    name: 'Validate PR Title and Branch'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate branch name
      run: |
        echo "üîç Validating branch name..."

        # Get branch name from PR
        BRANCH_NAME="${{ github.head_ref }}"
        echo "Branch: $BRANCH_NAME"

        # CUSTOMIZE: Adjust regex pattern if needed
        # Pattern: type/epic-XXX-9999-milestone-behavior
        # {2,4} allows 2-4 letter project codes
        BRANCH_REGEX="^(${{ env.ALLOWED_TYPES }})/epic-[A-Z]{2,4}-[0-9]{${{ env.EPIC_DIGITS }}}-.+"

        if [[ ! "$BRANCH_NAME" =~ $BRANCH_REGEX ]]; then
          echo "‚ùå ERROR: Branch name doesn't follow convention"
          echo ""
          echo "Expected format: type/epic-XXX-9999-milestone-behavior"
          echo "Valid types: ${{ env.ALLOWED_TYPES }}"
          echo ""
          echo "Examples:"
          echo "  feature/epic-${{ env.PROJECT_CODE }}-0001-auth-implement-jwt-tokens"
          echo "  fix/epic-${{ env.PROJECT_CODE }}-0042-api-handle-timeout-errors"
          echo "  docs/epic-${{ env.PROJECT_CODE }}-0003-readme-add-setup-instructions"
          echo ""
          echo "Your branch: $BRANCH_NAME"
          echo ""
          exit 1
        fi

        echo "‚úÖ Branch name follows convention"

    - name: Validate PR title
      run: |
        echo "üîç Validating PR title..."

        # Get PR title
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "PR Title: $PR_TITLE"

        # Extract branch info
        BRANCH_NAME="${{ github.head_ref }}"
        BRANCH_TYPE=$(echo "$BRANCH_NAME" | cut -d'/' -f1)
        EPIC_INFO=$(echo "$BRANCH_NAME" | grep -oE "epic-[A-Z]{2,4}-[0-9]{${{ env.EPIC_DIGITS }}}" || echo "")

        # Map branch type to PR prefix
        case "$BRANCH_TYPE" in
          feature)  PR_PREFIX="feat" ;;
          fix)      PR_PREFIX="fix" ;;
          docs)     PR_PREFIX="docs" ;;
          style)    PR_PREFIX="style" ;;
          refactor) PR_PREFIX="refac" ;;
          test)     PR_PREFIX="test" ;;
          chore)    PR_PREFIX="chore" ;;
          ci)       PR_PREFIX="ci" ;;
          *)        PR_PREFIX="feat" ;;
        esac

        echo "Expected prefix: $PR_PREFIX"
        echo "Epic info: $EPIC_INFO"

        # CUSTOMIZE: Adjust PR title pattern if needed
        # Pattern: {prefix}(epic-XXX-9999): description
        PR_REGEX="^${PR_PREFIX}\(${EPIC_INFO}\): .+"

        if [[ ! "$PR_TITLE" =~ $PR_REGEX ]]; then
          echo "‚ùå ERROR: PR title doesn't match branch convention"
          echo ""
          echo "Expected format: ${PR_PREFIX}(${EPIC_INFO}): Short description"
          echo ""
          echo "Examples:"
          echo "  ${PR_PREFIX}(${EPIC_INFO}): implement user authentication"
          echo "  ${PR_PREFIX}(${EPIC_INFO}): add API rate limiting"
          echo "  ${PR_PREFIX}(${EPIC_INFO}): update deployment documentation"
          echo ""
          echo "Your title: $PR_TITLE"
          echo ""
          echo "PR Title Format Rules:"
          echo "  - Start with: ${PR_PREFIX}(${EPIC_INFO}):"
          echo "  - Followed by lowercase description"
          echo "  - No period at the end"
          echo "  - Keep under 72 characters"
          echo ""
          exit 1
        fi

        echo "‚úÖ PR title matches convention"

    - name: Check PR title length
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        TITLE_LENGTH=${#PR_TITLE}

        echo "PR title length: $TITLE_LENGTH characters"

        # CUSTOMIZE: Adjust max length if needed (default: 72)
        MAX_LENGTH=72

        if [ $TITLE_LENGTH -gt $MAX_LENGTH ]; then
          echo "‚ö†Ô∏è  WARNING: PR title is longer than $MAX_LENGTH characters"
          echo "Consider shortening the description for better readability."
          echo ""
          # Note: This is a warning, not an error
        else
          echo "‚úÖ PR title length is acceptable"
        fi

    - name: Check for PR documentation
      run: |
        echo "üîç Checking for PR documentation..."

        BRANCH_NAME="${{ github.head_ref }}"
        BRANCH_FILENAME=$(echo "$BRANCH_NAME" | sed 's/\//-/g')

        # Check if docs/prs/ directory exists
        if [ ! -d "docs/prs" ]; then
          echo "‚ö†Ô∏è  WARNING: docs/prs/ directory not found"
          echo "Consider creating PR documentation for better change tracking."
          echo ""
          echo "Create: docs/prs/${BRANCH_FILENAME}.md"
          echo ""
          exit 0  # Warning only
        fi

        # Look for PR documentation file
        if [ -f "docs/prs/${BRANCH_FILENAME}.md" ]; then
          echo "‚úÖ Found PR documentation: docs/prs/${BRANCH_FILENAME}.md"

          # Check if file has content (not just template)
          if grep -q "PLACEHOLDER\|TODO:\|FIXME:" "docs/prs/${BRANCH_FILENAME}.md"; then
            echo "‚ö†Ô∏è  WARNING: PR documentation contains placeholder text"
            echo "Please complete the PR documentation before merging."
            echo ""
          fi
        else
          echo "‚ö†Ô∏è  WARNING: No PR documentation found"
          echo "Expected: docs/prs/${BRANCH_FILENAME}.md"
          echo ""
          echo "Create PR documentation:"
          echo "  1. Copy template: cp templates/PR_DOCUMENTATION_TEMPLATE.md docs/prs/${BRANCH_FILENAME}.md"
          echo "  2. Fill in all sections"
          echo "  3. Commit to this branch"
          echo ""
        fi

    - name: Validation summary
      if: always()
      run: |
        echo ""
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "‚úÖ PR Validation Complete"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo ""
        echo "Branch: ${{ github.head_ref }}"
        echo "PR: ${{ github.event.pull_request.title }}"
        echo "Author: ${{ github.event.pull_request.user.login }}"
        echo ""

# CUSTOMIZATION NOTES:
#
# 1. PROJECT CODES:
#    - Update PROJECT_CODE on line 30 to your 3-letter code
#    - If you use 2-letter or 4-letter codes, adjust {2,4} in regex patterns
#
# 2. EPIC NUMBERS:
#    - Update EPIC_DIGITS on line 31 if you use different length
#    - Common values: 3 (for 999) or 4 (for 9999)
#
# 3. BRANCH TYPES:
#    - Add custom types to ALLOWED_TYPES on line 37
#    - Add corresponding PR prefix mapping in "Validate PR title" step (lines 93-101)
#
# 4. PR DOCUMENTATION:
#    - Adjust docs/prs path if you use different location (line 163)
#    - Make check mandatory by changing exit 0 to exit 1 (line 169)
#
# 5. TITLE LENGTH:
#    - Adjust MAX_LENGTH on line 153 (default: 72 characters)
#    - Make warning an error by changing to exit 1
#
# 6. PROTECTED BRANCHES:
#    - Add additional branches to "branches:" on line 15
#    - Example: branches: [ main, master, develop, staging ]
#
# TESTING:
#
# 1. Commit this file to .github/workflows/pr-checks.yml
# 2. Push to repository
# 3. Create test PR with correct branch/title format - should pass
# 4. Create test PR with incorrect format - should fail with helpful message
# 5. Review GitHub Actions logs to verify checks run correctly
#
# TROUBLESHOOTING:
#
# - Workflow not running: Check branch name in "branches:" matches target
# - Regex not matching: Test regex at https://regex101.com/ with example names
# - Wrong prefix detected: Verify case mapping in lines 93-101
